name: Taipei Bus CI/CD

# control the flow
on:
  push:
    branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Build the .env file for Flask application
      run: |
        cd flask/app/
        echo "${{ secrets.ENV_FILE }}" > .env
    
    - name: Build Docker network for next step use
      run: |
        docker network create self-nginx-proxy
    
    - name: Run Docker Compose to start Taipei Bus application
      run: |
        docker compose up --build -d

    - name: Run Python unit test to check web and API status
      run: |
        docker ps -a
        docker exec -i web sh -c "cd /workspace/flask && ./startproject.sh"        
        docker exec -i web sh -c "cd /workspace/flask/app && python -m pytest -v"
#        docker exec -i web sh -c "cd /workspace/flask/app/module && python table_init.py && python MOTCdata_init.py"
#        docker exec -i web sh -c "cd /workspace/flask/app && python ./module/MOTCdata_init.py"        

    
    - name: Run Python test2
      run: |
        docker exec -i db sh -c "mysql -u'${{ secrets.DB_USER }}' -p'${{ secrets.DB_PASSWORD }}' -Dtaipeibus -e'SELECT COUNT(routeUID) FROM busroute;'"
        docker exec -i db sh -c "mysql -u'${{ secrets.DB_USER }}' -p'${{ secrets.DB_PASSWORD }}' -Dtaipeibus -e'SHOW TABLES;'"
        docker exec -i db sh -c "mysql -u'${{ secrets.DB_USER }}' -p'${{ secrets.DB_PASSWORD }}' -Dtaipeibus -e'SELECT COUNT(oname_tw) FROM operator;'"
    
#    - name: Run Docker Compose to start Nginx proxy server and automate create/renew SSL certificates via Let's Encrypt
#      run: |
#        docker compose -f docker-compose-nginx-proxy.yml up --build

#    - name: Set up Python 3.8
#      uses: actions/setup-python@v3
#      with:
#        python-version: "3.8"
    
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install pytest flask-testing

#    - name: Run Python unit test to check web and API status
#      run: |
#        cd flask/app/
#        python3 -m pytest -v
